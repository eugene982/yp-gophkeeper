// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/v1/gophkeeper.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GophKeeper_Ping_FullMethodName           = "/gophermart.v1.GophKeeper/Ping"
	GophKeeper_Register_FullMethodName       = "/gophermart.v1.GophKeeper/Register"
	GophKeeper_Login_FullMethodName          = "/gophermart.v1.GophKeeper/Login"
	GophKeeper_List_FullMethodName           = "/gophermart.v1.GophKeeper/List"
	GophKeeper_PasswordList_FullMethodName   = "/gophermart.v1.GophKeeper/PasswordList"
	GophKeeper_PasswordWrite_FullMethodName  = "/gophermart.v1.GophKeeper/PasswordWrite"
	GophKeeper_PasswordUpdate_FullMethodName = "/gophermart.v1.GophKeeper/PasswordUpdate"
	GophKeeper_PasswordRead_FullMethodName   = "/gophermart.v1.GophKeeper/PasswordRead"
	GophKeeper_PasswordDelete_FullMethodName = "/gophermart.v1.GophKeeper/PasswordDelete"
)

// GophKeeperClient is the client API for GophKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperClient interface {
	// Ping проверка соединения
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	// Register регистрация нового пользователя
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Login регистрация нового пользователя
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// List возвращает количество хранимых данных пользователя (защищённый)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	// PasswordList - возвращает список паролей пользователя
	PasswordList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PasswordListResponse, error)
	// PasswordWrite запись нового пароля
	PasswordWrite(ctx context.Context, in *PasswordWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// PasswordUpdate обновление имеющегочя пароля
	PasswordUpdate(ctx context.Context, in *PasswordWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// PasswordRead удаление пароля
	PasswordRead(ctx context.Context, in *PasswordReadRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// PasswordDelete удаление пароля
	PasswordDelete(ctx context.Context, in *PasswordReadRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type gophKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperClient(cc grpc.ClientConnInterface) GophKeeperClient {
	return &gophKeeperClient{cc}
}

func (c *gophKeeperClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, GophKeeper_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, GophKeeper_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, GophKeeper_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, GophKeeper_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PasswordListResponse, error) {
	out := new(PasswordListResponse)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordWrite(ctx context.Context, in *PasswordWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordWrite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordUpdate(ctx context.Context, in *PasswordWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordRead(ctx context.Context, in *PasswordReadRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordDelete(ctx context.Context, in *PasswordReadRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeeperServer is the server API for GophKeeper service.
// All implementations must embed UnimplementedGophKeeperServer
// for forward compatibility
type GophKeeperServer interface {
	// Ping проверка соединения
	Ping(context.Context, *empty.Empty) (*PingResponse, error)
	// Register регистрация нового пользователя
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Login регистрация нового пользователя
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// List возвращает количество хранимых данных пользователя (защищённый)
	List(context.Context, *empty.Empty) (*ListResponse, error)
	// PasswordList - возвращает список паролей пользователя
	PasswordList(context.Context, *empty.Empty) (*PasswordListResponse, error)
	// PasswordWrite запись нового пароля
	PasswordWrite(context.Context, *PasswordWriteRequest) (*empty.Empty, error)
	// PasswordUpdate обновление имеющегочя пароля
	PasswordUpdate(context.Context, *PasswordWriteRequest) (*empty.Empty, error)
	// PasswordRead удаление пароля
	PasswordRead(context.Context, *PasswordReadRequest) (*empty.Empty, error)
	// PasswordDelete удаление пароля
	PasswordDelete(context.Context, *PasswordReadRequest) (*empty.Empty, error)
	mustEmbedUnimplementedGophKeeperServer()
}

// UnimplementedGophKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedGophKeeperServer struct {
}

func (UnimplementedGophKeeperServer) Ping(context.Context, *empty.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGophKeeperServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGophKeeperServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGophKeeperServer) List(context.Context, *empty.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGophKeeperServer) PasswordList(context.Context, *empty.Empty) (*PasswordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordList not implemented")
}
func (UnimplementedGophKeeperServer) PasswordWrite(context.Context, *PasswordWriteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordWrite not implemented")
}
func (UnimplementedGophKeeperServer) PasswordUpdate(context.Context, *PasswordWriteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordUpdate not implemented")
}
func (UnimplementedGophKeeperServer) PasswordRead(context.Context, *PasswordReadRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRead not implemented")
}
func (UnimplementedGophKeeperServer) PasswordDelete(context.Context, *PasswordReadRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordDelete not implemented")
}
func (UnimplementedGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {}

// UnsafeGophKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperServer will
// result in compilation errors.
type UnsafeGophKeeperServer interface {
	mustEmbedUnimplementedGophKeeperServer()
}

func RegisterGophKeeperServer(s grpc.ServiceRegistrar, srv GophKeeperServer) {
	s.RegisterService(&GophKeeper_ServiceDesc, srv)
}

func _GophKeeper_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordWrite(ctx, req.(*PasswordWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordUpdate(ctx, req.(*PasswordWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordRead(ctx, req.(*PasswordReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordDelete(ctx, req.(*PasswordReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeeper_ServiceDesc is the grpc.ServiceDesc for GophKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophermart.v1.GophKeeper",
	HandlerType: (*GophKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GophKeeper_Ping_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _GophKeeper_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GophKeeper_Login_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GophKeeper_List_Handler,
		},
		{
			MethodName: "PasswordList",
			Handler:    _GophKeeper_PasswordList_Handler,
		},
		{
			MethodName: "PasswordWrite",
			Handler:    _GophKeeper_PasswordWrite_Handler,
		},
		{
			MethodName: "PasswordUpdate",
			Handler:    _GophKeeper_PasswordUpdate_Handler,
		},
		{
			MethodName: "PasswordRead",
			Handler:    _GophKeeper_PasswordRead_Handler,
		},
		{
			MethodName: "PasswordDelete",
			Handler:    _GophKeeper_PasswordDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/gophkeeper.proto",
}
