// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/v1/gophkeeper.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GophKeeper_Ping_FullMethodName           = "/gophermart.v1.GophKeeper/Ping"
	GophKeeper_Register_FullMethodName       = "/gophermart.v1.GophKeeper/Register"
	GophKeeper_Login_FullMethodName          = "/gophermart.v1.GophKeeper/Login"
	GophKeeper_List_FullMethodName           = "/gophermart.v1.GophKeeper/List"
	GophKeeper_PasswordList_FullMethodName   = "/gophermart.v1.GophKeeper/PasswordList"
	GophKeeper_PasswordWrite_FullMethodName  = "/gophermart.v1.GophKeeper/PasswordWrite"
	GophKeeper_PasswordUpdate_FullMethodName = "/gophermart.v1.GophKeeper/PasswordUpdate"
	GophKeeper_PasswordRead_FullMethodName   = "/gophermart.v1.GophKeeper/PasswordRead"
	GophKeeper_PasswordDelete_FullMethodName = "/gophermart.v1.GophKeeper/PasswordDelete"
	GophKeeper_CardList_FullMethodName       = "/gophermart.v1.GophKeeper/CardList"
	GophKeeper_CardWrite_FullMethodName      = "/gophermart.v1.GophKeeper/CardWrite"
	GophKeeper_CardUpdate_FullMethodName     = "/gophermart.v1.GophKeeper/CardUpdate"
	GophKeeper_CardRead_FullMethodName       = "/gophermart.v1.GophKeeper/CardRead"
	GophKeeper_CardDelete_FullMethodName     = "/gophermart.v1.GophKeeper/CardDelete"
	GophKeeper_NoteList_FullMethodName       = "/gophermart.v1.GophKeeper/NoteList"
	GophKeeper_NoteWrite_FullMethodName      = "/gophermart.v1.GophKeeper/NoteWrite"
	GophKeeper_NoteUpdate_FullMethodName     = "/gophermart.v1.GophKeeper/NoteUpdate"
	GophKeeper_NoteRead_FullMethodName       = "/gophermart.v1.GophKeeper/NoteRead"
	GophKeeper_NoteDelete_FullMethodName     = "/gophermart.v1.GophKeeper/NoteDelete"
)

// GophKeeperClient is the client API for GophKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperClient interface {
	// Ping проверка соединения
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	// Register регистрация нового пользователя
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Login регистрация нового пользователя
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// List возвращает количество хранимых данных пользователя (защищённый)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	// PasswordList - возвращает список паролей пользователя
	PasswordList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PasswordListResponse, error)
	// PasswordWrite запись нового пароля
	PasswordWrite(ctx context.Context, in *PasswordWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// PasswordUpdate обновление имеющегочя пароля
	PasswordUpdate(ctx context.Context, in *PasswordUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// PasswordRead удаление пароля
	PasswordRead(ctx context.Context, in *PasswordReadRequest, opts ...grpc.CallOption) (*PasswordReadResponse, error)
	// PasswordDelete удаление пароля
	PasswordDelete(ctx context.Context, in *PasswordDelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CardList - возвращает список банковских карт
	CardList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CardListResponse, error)
	// CardWrite запись нового
	CardWrite(ctx context.Context, in *CardWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CardUpdate обновление
	CardUpdate(ctx context.Context, in *CardUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CardRead чтение
	CardRead(ctx context.Context, in *CardReadRequest, opts ...grpc.CallOption) (*CardReadResponse, error)
	// CardDelete удаление
	CardDelete(ctx context.Context, in *CardDelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// NoteList - список
	NoteList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NoteListResponse, error)
	// CardWrite запись нового
	NoteWrite(ctx context.Context, in *NoteWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CardUpdate обновление
	NoteUpdate(ctx context.Context, in *NoteUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CardRead чтение
	NoteRead(ctx context.Context, in *NoteReadRequest, opts ...grpc.CallOption) (*NoteReadResponse, error)
	// CardDelete удаление
	NoteDelete(ctx context.Context, in *NoteDelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type gophKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperClient(cc grpc.ClientConnInterface) GophKeeperClient {
	return &gophKeeperClient{cc}
}

func (c *gophKeeperClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, GophKeeper_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, GophKeeper_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, GophKeeper_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, GophKeeper_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PasswordListResponse, error) {
	out := new(PasswordListResponse)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordWrite(ctx context.Context, in *PasswordWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordWrite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordUpdate(ctx context.Context, in *PasswordUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordRead(ctx context.Context, in *PasswordReadRequest, opts ...grpc.CallOption) (*PasswordReadResponse, error) {
	out := new(PasswordReadResponse)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) PasswordDelete(ctx context.Context, in *PasswordDelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_PasswordDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) CardList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CardListResponse, error) {
	out := new(CardListResponse)
	err := c.cc.Invoke(ctx, GophKeeper_CardList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) CardWrite(ctx context.Context, in *CardWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_CardWrite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) CardUpdate(ctx context.Context, in *CardUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_CardUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) CardRead(ctx context.Context, in *CardReadRequest, opts ...grpc.CallOption) (*CardReadResponse, error) {
	out := new(CardReadResponse)
	err := c.cc.Invoke(ctx, GophKeeper_CardRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) CardDelete(ctx context.Context, in *CardDelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_CardDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) NoteList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NoteListResponse, error) {
	out := new(NoteListResponse)
	err := c.cc.Invoke(ctx, GophKeeper_NoteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) NoteWrite(ctx context.Context, in *NoteWriteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_NoteWrite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) NoteUpdate(ctx context.Context, in *NoteUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_NoteUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) NoteRead(ctx context.Context, in *NoteReadRequest, opts ...grpc.CallOption) (*NoteReadResponse, error) {
	out := new(NoteReadResponse)
	err := c.cc.Invoke(ctx, GophKeeper_NoteRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) NoteDelete(ctx context.Context, in *NoteDelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_NoteDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeeperServer is the server API for GophKeeper service.
// All implementations must embed UnimplementedGophKeeperServer
// for forward compatibility
type GophKeeperServer interface {
	// Ping проверка соединения
	Ping(context.Context, *empty.Empty) (*PingResponse, error)
	// Register регистрация нового пользователя
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Login регистрация нового пользователя
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// List возвращает количество хранимых данных пользователя (защищённый)
	List(context.Context, *empty.Empty) (*ListResponse, error)
	// PasswordList - возвращает список паролей пользователя
	PasswordList(context.Context, *empty.Empty) (*PasswordListResponse, error)
	// PasswordWrite запись нового пароля
	PasswordWrite(context.Context, *PasswordWriteRequest) (*empty.Empty, error)
	// PasswordUpdate обновление имеющегочя пароля
	PasswordUpdate(context.Context, *PasswordUpdateRequest) (*empty.Empty, error)
	// PasswordRead удаление пароля
	PasswordRead(context.Context, *PasswordReadRequest) (*PasswordReadResponse, error)
	// PasswordDelete удаление пароля
	PasswordDelete(context.Context, *PasswordDelRequest) (*empty.Empty, error)
	// CardList - возвращает список банковских карт
	CardList(context.Context, *empty.Empty) (*CardListResponse, error)
	// CardWrite запись нового
	CardWrite(context.Context, *CardWriteRequest) (*empty.Empty, error)
	// CardUpdate обновление
	CardUpdate(context.Context, *CardUpdateRequest) (*empty.Empty, error)
	// CardRead чтение
	CardRead(context.Context, *CardReadRequest) (*CardReadResponse, error)
	// CardDelete удаление
	CardDelete(context.Context, *CardDelRequest) (*empty.Empty, error)
	// NoteList - список
	NoteList(context.Context, *empty.Empty) (*NoteListResponse, error)
	// CardWrite запись нового
	NoteWrite(context.Context, *NoteWriteRequest) (*empty.Empty, error)
	// CardUpdate обновление
	NoteUpdate(context.Context, *NoteUpdateRequest) (*empty.Empty, error)
	// CardRead чтение
	NoteRead(context.Context, *NoteReadRequest) (*NoteReadResponse, error)
	// CardDelete удаление
	NoteDelete(context.Context, *NoteDelRequest) (*empty.Empty, error)
	mustEmbedUnimplementedGophKeeperServer()
}

// UnimplementedGophKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedGophKeeperServer struct {
}

func (UnimplementedGophKeeperServer) Ping(context.Context, *empty.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGophKeeperServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGophKeeperServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGophKeeperServer) List(context.Context, *empty.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGophKeeperServer) PasswordList(context.Context, *empty.Empty) (*PasswordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordList not implemented")
}
func (UnimplementedGophKeeperServer) PasswordWrite(context.Context, *PasswordWriteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordWrite not implemented")
}
func (UnimplementedGophKeeperServer) PasswordUpdate(context.Context, *PasswordUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordUpdate not implemented")
}
func (UnimplementedGophKeeperServer) PasswordRead(context.Context, *PasswordReadRequest) (*PasswordReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRead not implemented")
}
func (UnimplementedGophKeeperServer) PasswordDelete(context.Context, *PasswordDelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordDelete not implemented")
}
func (UnimplementedGophKeeperServer) CardList(context.Context, *empty.Empty) (*CardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardList not implemented")
}
func (UnimplementedGophKeeperServer) CardWrite(context.Context, *CardWriteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardWrite not implemented")
}
func (UnimplementedGophKeeperServer) CardUpdate(context.Context, *CardUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardUpdate not implemented")
}
func (UnimplementedGophKeeperServer) CardRead(context.Context, *CardReadRequest) (*CardReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardRead not implemented")
}
func (UnimplementedGophKeeperServer) CardDelete(context.Context, *CardDelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardDelete not implemented")
}
func (UnimplementedGophKeeperServer) NoteList(context.Context, *empty.Empty) (*NoteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteList not implemented")
}
func (UnimplementedGophKeeperServer) NoteWrite(context.Context, *NoteWriteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteWrite not implemented")
}
func (UnimplementedGophKeeperServer) NoteUpdate(context.Context, *NoteUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteUpdate not implemented")
}
func (UnimplementedGophKeeperServer) NoteRead(context.Context, *NoteReadRequest) (*NoteReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteRead not implemented")
}
func (UnimplementedGophKeeperServer) NoteDelete(context.Context, *NoteDelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteDelete not implemented")
}
func (UnimplementedGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {}

// UnsafeGophKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperServer will
// result in compilation errors.
type UnsafeGophKeeperServer interface {
	mustEmbedUnimplementedGophKeeperServer()
}

func RegisterGophKeeperServer(s grpc.ServiceRegistrar, srv GophKeeperServer) {
	s.RegisterService(&GophKeeper_ServiceDesc, srv)
}

func _GophKeeper_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordWrite(ctx, req.(*PasswordWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordUpdate(ctx, req.(*PasswordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordRead(ctx, req.(*PasswordReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_PasswordDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).PasswordDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_PasswordDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).PasswordDelete(ctx, req.(*PasswordDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_CardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).CardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_CardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).CardList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_CardWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).CardWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_CardWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).CardWrite(ctx, req.(*CardWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_CardUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).CardUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_CardUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).CardUpdate(ctx, req.(*CardUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_CardRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).CardRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_CardRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).CardRead(ctx, req.(*CardReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_CardDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).CardDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_CardDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).CardDelete(ctx, req.(*CardDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_NoteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).NoteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_NoteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).NoteList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_NoteWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).NoteWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_NoteWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).NoteWrite(ctx, req.(*NoteWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_NoteUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).NoteUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_NoteUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).NoteUpdate(ctx, req.(*NoteUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_NoteRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).NoteRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_NoteRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).NoteRead(ctx, req.(*NoteReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_NoteDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).NoteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_NoteDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).NoteDelete(ctx, req.(*NoteDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeeper_ServiceDesc is the grpc.ServiceDesc for GophKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophermart.v1.GophKeeper",
	HandlerType: (*GophKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GophKeeper_Ping_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _GophKeeper_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GophKeeper_Login_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GophKeeper_List_Handler,
		},
		{
			MethodName: "PasswordList",
			Handler:    _GophKeeper_PasswordList_Handler,
		},
		{
			MethodName: "PasswordWrite",
			Handler:    _GophKeeper_PasswordWrite_Handler,
		},
		{
			MethodName: "PasswordUpdate",
			Handler:    _GophKeeper_PasswordUpdate_Handler,
		},
		{
			MethodName: "PasswordRead",
			Handler:    _GophKeeper_PasswordRead_Handler,
		},
		{
			MethodName: "PasswordDelete",
			Handler:    _GophKeeper_PasswordDelete_Handler,
		},
		{
			MethodName: "CardList",
			Handler:    _GophKeeper_CardList_Handler,
		},
		{
			MethodName: "CardWrite",
			Handler:    _GophKeeper_CardWrite_Handler,
		},
		{
			MethodName: "CardUpdate",
			Handler:    _GophKeeper_CardUpdate_Handler,
		},
		{
			MethodName: "CardRead",
			Handler:    _GophKeeper_CardRead_Handler,
		},
		{
			MethodName: "CardDelete",
			Handler:    _GophKeeper_CardDelete_Handler,
		},
		{
			MethodName: "NoteList",
			Handler:    _GophKeeper_NoteList_Handler,
		},
		{
			MethodName: "NoteWrite",
			Handler:    _GophKeeper_NoteWrite_Handler,
		},
		{
			MethodName: "NoteUpdate",
			Handler:    _GophKeeper_NoteUpdate_Handler,
		},
		{
			MethodName: "NoteRead",
			Handler:    _GophKeeper_NoteRead_Handler,
		},
		{
			MethodName: "NoteDelete",
			Handler:    _GophKeeper_NoteDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/gophkeeper.proto",
}
